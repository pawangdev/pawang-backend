generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model categories {
    id            Int               @id @default(autoincrement())
    name          String            @unique @db.VarChar(100)
    icon          String            @db.Text
    type          transactions_type
    created_at    DateTime          @default(now())
    updated_at    DateTime          @updatedAt
    transactions  transactions[]
    subcategories sub_categories[]
}

model sub_categories {
    id           Int               @id @default(autoincrement())
    name         String
    type         transactions_type
    user_id      Int
    category_id  Int
    categories   categories        @relation(fields: [category_id], references: [id])
    users        users             @relation(fields: [user_id], references: [id], onDelete: Cascade)
    transactions transactions[]
}

model transactions {
    id             Int               @id @default(autoincrement())
    amount         Float?
    category_id    Int
    wallet_id      Int
    subcategory_id Int?
    type           transactions_type
    description    String?           @db.Text
    image_url      String?           @db.VarChar(255)
    date           DateTime?         @default(now())
    user_id        Int
    created_at     DateTime          @default(now())
    updated_at     DateTime          @updatedAt
    category       categories        @relation(fields: [category_id], references: [id], onUpdate: Restrict, map: "fk_transactions_category")
    user           users             @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "fk_users_transactions")
    wallet         wallets           @relation(fields: [wallet_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_wallets_transactions")
    subcategory    sub_categories?   @relation(fields: [subcategory_id], references: [id], onDelete: SetNull)

    @@index([category_id], map: "fk_transactions_category")
    @@index([user_id], map: "fk_users_transactions")
    @@index([wallet_id], map: "fk_wallets_transactions")
}

model user_reset_passwords {
    id         Int      @id @default(autoincrement())
    email      String   @unique @db.VarChar(50)
    token      String   @db.VarChar(100)
    expired_at DateTime
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model users {
    id               Int                @id @default(autoincrement())
    name             String             @db.VarChar(50)
    email            String             @unique(map: "email") @db.VarChar(50)
    password         String             @db.VarChar(255)
    phone            String?            @db.VarChar(15)
    gender           users_gender?
    role             String             @default("user")
    image_profile    String?            @db.VarChar(255)
    google_id        String?            @unique @db.VarChar(255)
    created_at       DateTime           @default(now())
    updated_at       DateTime           @updatedAt
    transactions     transactions[]
    wallets          wallets[]
    sub_categories   sub_categories[]
    task_reminders   task_reminders[]
    users_onesignals users_onesignals[]
}

model users_onesignals {
    id           Int      @id @default(autoincrement())
    user_id      Int
    onesignal_id String   @db.VarChar(255)
    created_at   DateTime @default(now())
    updated_at   DateTime @updatedAt
    users        users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_users_onesignals_users")
}

model task_reminders {
    id         Int           @id @default(autoincrement())
    name       String        @db.VarChar(255)
    type       reminder_type
    date       DateTime
    is_active  Boolean       @default(true)
    user_id    Int
    created_at DateTime      @default(now())
    updated_at DateTime      @updatedAt
    user       users         @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model wallets {
    id           Int            @id @default(autoincrement())
    name         String         @db.VarChar(100)
    user_id      Int
    balance      Float?
    created_at   DateTime       @default(now())
    updated_at   DateTime       @updatedAt
    users        users          @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "fk_users_wallets")
    transactions transactions[]

    @@index([user_id], map: "fk_users_wallets")
}

model app_versioning {
    id         Int      @id @default(autoincrement())
    version    String   @db.VarChar(10)
    is_force   Boolean  @default(false)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

enum reminder_type {
    once
    daily
    weekly
    monthly
    yearly
}

enum transactions_type {
    income
    outcome
}

enum users_gender {
    male
    female
}
